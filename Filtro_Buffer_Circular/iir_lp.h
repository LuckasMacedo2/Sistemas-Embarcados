/**************************************************************
WinFilter version 0.8
http://www.winfilter.20m.com
akundert@hotmail.com

Filter type: Low Pass
Filter model: Chebyshev
Filter order: 10
Sampling Frequency: 4 Hz
Cut Frequency: 1.000000 Hz
Pass band Ripple: 1.000000 dB
Coefficents Quantization: float

Z domain Zeros
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000
z = -1.000000 + j 0.000000

Z domain Poles
z = 0.278250 + j -0.829090
z = 0.278250 + j 0.829090
z = 0.095436 + j -0.925787
z = 0.095436 + j 0.925787
z = 0.521848 + j -0.618942
z = 0.521848 + j 0.618942
z = 0.001931 + j -0.977786
z = 0.001931 + j 0.977786
z = 0.719103 + j -0.237993
z = 0.719103 + j 0.237993
***************************************************************/
#define NCoef 10
float iir(float NewSample) {
    float ACoef[NCoef+1] = {
        0.00032972779139655461,
        0.00329727791396554600,
        0.01483775061284495700,
        0.03956733496758655500,
        0.06924283619327646600,
        0.08309140343193176200,
        0.06924283619327646600,
        0.03956733496758655500,
        0.01483775061284495700,
        0.00329727791396554600,
        0.00032972779139655461
    };

    float BCoef[NCoef+1] = {
        1.00000000000000000000,
        -3.23313573736973540000,
        7.29088122459923850000,
        -11.63338509553216400000,
        14.56971555553700900000,
        -14.49767863288325600000,
        11.57355335172134200000,
        -7.31071195866787440000,
        3.53330544548646190000,
        -1.20305133724985240000,
        0.23817494761661676000
    };

    static float y[NCoef+1]; //output samples
    static float x[NCoef+1]; //input samples
    int n;

    //shift the old samples
    for(n=NCoef; n>0; n--) {
       x[n] = x[n-1];
       y[n] = y[n-1];
    }

    //Calculate the new output
    x[0] = NewSample;
    y[0] = ACoef[0] * x[0];
    for(n=1; n<=NCoef; n++)
        y[0] += ACoef[n] * x[n] - BCoef[n] * y[n];
    
    return y[0];
}
